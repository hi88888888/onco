@require 'lib/helpers'
@require 'lib/foundation'

// test mixin
my-custom-block(fz)
  border-radius 5px
  border 1px solid
  font-size fz
  margin fz

vendors = webkit moz o ms official
height()
  for vendor in vendors
    if vendor == official
      height: arguments
    else
      -{vendor}-: arguments

@font-face
  font-family Geo
  font-style normal
  src url(fonts/geo_sans_light/GensansLight.ttf)
//.ingeo
//font-family Geo

@keyframes pulse
  0%
    background-color red
    transform scale(1.0) rotate(0deg)
  33%
    background-color blue
    -webkit-transform scale(1.1) rotate(-5deg)

//table
//for row in 1 2 3 4 5
//tr:nth-child({row})
//height: 10px * row

//color blue
//a
//background-color: @color

//#prompt
//  position: absolute
//  top: 150px
//  left: 50%
//  width: w = 200px
//  margin-left: -(w / 2)

//add(a, b = a)
//  a = unit(a, px)
//  b = unit(b, px)
//  a + b
//
//add(15%, 10deg)
//// => 25

//ul
//  li a
//    display: block
//    color: blue
//    padding: 5px
//    html.ie &
//      padding: 6px
//    &:hover
//      color: red


//-pos(type, args)
//  i = 0
//  position: unquote(type)
//  {args[i]}: args[i + 1] is a 'unit' ? args[i += 1] : 0
//  {args[i += 1]}: args[i + 1] is a 'unit' ? args[i += 1] : 0
//
//absolute()
//  -pos('absolute', arguments)
//
//fixed()
//  -pos('fixed', arguments)
//
//#prompt
//  absolute: top 150px left 5px
//  width: 200px
//  margin-left: -(@width / 2)
//
//#logo
//  fixed: top left

//generate-grid(increment, start, end, return-dimension=false)
//  total = start
//  for n, x in 0..((end - start) / increment)
//    if return-dimension
//      if x+1 is return-dimension
//        return total
//      else
//      .column-{x+1}
//        width total
//    total = total + increment

//миксин установки цвета на ссылку
//special-homepage-styles(color = '#ccc')
//  a
//    color color
//    &:visited
//      color navy

u = 1rem

b = black
c = center
p = padding
m = margin
fon = #F4F3F3

align()
  align-content c
  justify-content c
  align-items c

/**
  * trinspiles to:
  * .bg-primary { background-color: #46555F}
  * .bg-primary { background-color: #7D8C96}
  */
$color-primary = #F4F3F3
$color-secondary = #F3F4F4
colors = 'primary' 'secondary'
for color in colors
  {'.bg-' + color}
    background-color lookup('$color-' + color) !important


// > * + *
body.bg-primary
  p u
  //fon = #F4F3F3


// <track-list> - 6 групп параметров
// ~ + mixin __ на значение 209px
//grid-template-rows 100px repeat(2, 4fr) 70px
//grid-template-rows repeat(3, minmax(209px, auto)) -> небольшой хак - добавил вместо одного параметра - два включая max-content -< можно без этого параметра
// 3 rows -> grid-template-rows __ minmax(max-content, 209px) minmax(max-content, 209px) minmax(max-content, auto) __ -< апробация ^ свертка
// grid-template-rows repeat(3, minmax(195px, auto)) max-content
// -> func auto__size__columns___~2()
//padding 2px
//height 100% - используем доступное пространство
// test1 ! my-custom-block(2em)
// test2
//@media screen and (max-width: 700px)
//  my-custom-block(1em)
.container
  display grid
  grid-template-rows repeat(3, minmax(195px, auto)) max-content

  pad(types = grid-auto-rows grid-auto-columns, n = 100px)
    grid-auto-rows unit(n, px) if grid-auto-rows in types
    grid-auto-columns unit(n, px) if grid-auto-columns in types
  apply-mixins = true
  pad(grid-auto-rows, 195) if apply-mixins
  grid-gap u
  box-sizing border-box
  height fit-content

  col := fon
  col ?= fon
  col = col is defined ? col : white
  background col

  align()
  //border 2px solid b
  // переопределили
  unit := u
  unit ?= u
  unit = u is defined ? u : 0
  sd = solid
  // захэшируем поля после обработки
  hpsb = {
    unit: unit,
    sd: sd,
    b: b
  }
  // getter - получаем значения из хешей
  border hpsb.unit hpsb.sd hpsb.b

  for i in 1..4
    @media screen and (min-width: 2**(i+7)px)
      grid-template-rows repeat(3, minmax(195px*i, auto)) max-content
      //width: 100px*i

// -> 1
//хэши
//--query = {
//    small: "screen and (min-width: 554px)",
//    medium: "screen and (min-width: 768px)",
//    large: "screen and (min-width: 992px)",
//    extra-large: "screen and (min-width: 1200px)",
//}
//@media --query.large
//  left: 70px
///////////////////////////////

// -> 2
// media
//media(args...)
//  output = null
//  for arg in args
//    // check for tuple
//    if arg[1]
//      push(output,unquote('(%s: %s)' % (arg[0] arg[1])))
//    else
//      push(output,unquote(arg))
//
//  unquote(s('%s',output))
//
//$_media = media(screen,'and',(min-width $screen-tablet))
//@media $_media
//  .container
//    max-width 728px

//-> 3
//sizes = {
//  mobile: 0 768
//  tablet: 769 1023
//  desktop: 1024 1215
//  widescreen: 1216 1407
//  fullhd: 1408 99999999
//}
//query = {}
//for name, pxs in sizes
//  min = '(min-width:' + pxs[0] + 'px)'
//  max = '(max-width:' + pxs[1] + 'px)'
//  query[name] = min + ' and ' + max
//  query[name + '-up'] = 'screen and ' + min
//  query[name + '-down'] = 'screen and ' + max
// Usage: @media query.mobile or @media query.tablet-up etc...


@media (min-width 48em)
  body
    p 0

@media (max-width 18.75em)
  html
    font-size 5.5vw

@media print
  #header
  #footer
    display none

//@media

//$var-1 = 100px
//$var-2 = 30px
//$var-rgb-color = rgb(132, 160, 28)
//
//.white-mouse
//  width $var-2
//  height $var-1 - $var-2
//  margin $var-1 (-($var-2))
//  padding ($var-1 / 2)
//  margin-top @padding
//  margin "calc(10% - %s)" % $var-1
//  margin "calc(%s - %s)" % ($var-1 $var-2)
//
//  background $var-rgb-color
//  background rgba($var-rgb-color, 0.5)


// Миксин создания grid на основе минимального\максимального значений и инкремента
//generate-grid(increment,start,end,return-dimension=false)
//  total = start
//for n, x in 0..((end - start) / increment)
//  if return-dimension
//    if x+1 is return-dimension
//      return total
//    else
//  .column-{x+1}
//    width total
//total = total + increment
